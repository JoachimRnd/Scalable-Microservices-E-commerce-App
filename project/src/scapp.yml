version: "3"
services:     # list all services for your application

  ###########
  # Logging #
  ###########
  logger-daemon:
    image: ${DOCKER_ID}/scapp-logger:latest
    ports: [ "3009:80" ]
    environment:
      - TOKEN_SECRET=AkbRocZI           # string to create tokens (see utils/en-de-coders.js)
      - DEBUG=logging-d                 # header for loggining messages
      - LOGGING_HOST=logging-db         # name of container for loggining messages
      - WITH_PERSISTENT_DATA=Y          # non empty string use perisitence (with CouchDB)
      - DB_HOST=logging-db              # name of container running CouchDB
      - DB_PORT=5984                    # port number of CouchDB and logging db
      - GATEWAY_HOST=gateway            # name of container running gateway
      - ADMIN_NAME=admin
      - ADMIN_PASSW=admin
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks: [ "scapp-net" ]
  logging-db:
    image: ${DOCKER_ID}/storage-system:latest
    ports: ["3010:5984"]
    deploy:
      # deploy only one instance of this service
      replicas: 1
      restart_policy:
        # restart if something went wrong
        condition: on-failure
    networks: [ "scapp-net" ]
  
  ############
  # frontend #
  ############
  frontend:
    image: ${DOCKER_ID}/scapp-frontend:latest
    ports: [ "3002:3000" ]
    environment:
      - PUBLIC_AUTH_SERVICE_URL=http://192.168.56.101:80
    deploy:
      # deploy 3 instances of this service
      replicas: 1
      restart_policy:
        # restart if something went wrong
        condition: on-failure
    networks: [ "scapp-net" ]
  

  #########
  # users #
  #########
  # server that listens HTTP requests
  users-daemon:
    image: ${DOCKER_ID}/scapp-auth:latest
    ports: [ "3000:80" ]
    environment:
      - TOKEN_SECRET=AkbRocZI           # string to create tokens (see utils/en-de-coders.js)
      - DEBUG=users-d                   # header for loggining messages
      - LOGGING_HOST=logger-daemon     # name of container for loggining messages
      - WITH_PERSISTENT_DATA=Y          # non empty string use perisitence (with CouchDB)
      - DB_HOST=users-db                # name of container running CouchDB
      - DB_PORT=5984                    # port number of CouchDB and logging db
      - DB_NAME=users                   # name of database and logging db
      - GATEWAY_HOST=gateway            # name of container running gateway
      - ADMIN_NAME=admin
      - ADMIN_PASSW=admin
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    depends_on: [ "logger-daemon", "users-db" ]
    networks: [ "scapp-net" ]
  # database of users
  users-db:
    # image name
    image: ${DOCKER_ID}/storage-system:latest
    ports: ["3001:5984"]
    deploy:
      # deploy only one instance of this service
      replicas: 1
      restart_policy:
        # restart if something went wrong
        condition: on-failure
    networks: [ "scapp-net" ]


  ##########
  # Orders #
  ##########
  # server that listens order HTTP requests
  orders-daemon:
    image: ${DOCKER_ID}/scapp-orders:latest
    ports: [ "3004:80" ]
    environment:
      - TOKEN_SECRET=AkbRocZI           # string to create tokens (see utils/en-de-coders.js)
      - DEBUG=orders-d                  # header for loggining messages
      - LOGGING_HOST=logger-daemon     # name of container for loggining messages
      - WITH_PERSISTENT_DATA=Y          # non empty string use perisitence (with CouchDB)
      - DB_HOST=orders-db               # name of container running CouchDB
      - DB_PORT=5984                    # port number of CouchDB and logging db
      - DB_NAME=orders                  # name of database
      - GATEWAY_HOST=gateway            # name of container running gateway
      - ADMIN_NAME=admin
      - ADMIN_PASSW=admin
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    depends_on: [ "logger-daemon", "orders-db" ]
    networks: [ "scapp-net" ]
  # database of orders
  orders-db:
    # image name
    image: ${DOCKER_ID}/storage-system:latest
    ports: ["3003:5984"]
    deploy:
      # deploy only one instance of this service
      replicas: 1
      restart_policy:
        # restart if something went wrong
        condition: on-failure
    networks: [ "scapp-net" ]


  ##################
  # Shopping-carts #
  ##################
  # server that listens order HTTP requests
  shopping-carts-daemon:
    image: ${DOCKER_ID}/scapp-shopping-carts:latest
    ports: [ "3005:80" ]
    environment:
      - TOKEN_SECRET=AkbRocZI           # string to create tokens (see utils/en-de-coders.js)
      - DEBUG=shopping-carts-d          # header for loggining messages
      - LOGGING_HOST=logger-daemon     # name of container for loggining messages
      - WITH_PERSISTENT_DATA=Y          # non empty string use perisitence (with CouchDB)
      - DB_HOST=shopping-carts-db       # name of container running CouchDB
      - DB_PORT=5984                    # port number of CouchDB and logging db
      - DB_NAME=shopping-carts          # name of database
      - GATEWAY_HOST=gateway            # name of container running gateway
      - ADMIN_NAME=admin
      - ADMIN_PASSW=admin
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    depends_on: [ "logger-daemon", "shopping-carts-db" ]
    networks: [ "scapp-net" ]
  # database of shopping-carts
  shopping-carts-db:
    # image name
    image: ${DOCKER_ID}/storage-system:latest
    ports: ["3006:5984"]
    deploy:
      # deploy only one instance of this service
      replicas: 1
      restart_policy:
        # restart if something went wrong
        condition: on-failure
    networks: [ "scapp-net" ]

  ############
  # Products #
  ############
  # server that listens order HTTP requests
  products-daemon:
    image: ${DOCKER_ID}/scapp-products:latest
    depends_on: [ "products-db" ]
    ports: [ "3007:80" ]
    environment:
      - TOKEN_SECRET=AkbRocZI           # string to create tokens (see utils/en-de-coders.js)
      - DEBUG=products-d                # header for loggining messages
      - LOGGING_HOST=logger-daemon      # name of container for loggining messages
      - WITH_PERSISTENT_DATA=Y          # non empty string use perisitence (with CouchDB)
      - DB_HOST=products-db             # name of container running CouchDB
      - DB_PORT=5984                    # port number of CouchDB and logging db
      - DB_NAME=products                # name of database
      - GATEWAY_HOST=gateway            # name of container running gateway
      - ADMIN_NAME=admin
      - ADMIN_PASSW=admin
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    depends_on: [ "logger-daemon", "products-db" ]
    networks: [ "scapp-net" ]
  # database of products
  products-db:
    # image name
    image: ${DOCKER_ID}/storage-system:latest
    ports: ["3008:5984"]
    deploy:
      # deploy only one instance of this service
      replicas: 1
      restart_policy:
        # restart if something went wrong
        condition: on-failure
    networks: [ "scapp-net" ]


  #######################
  # Recommendations     #
  #######################
  recommendations-daemon:
    image: ${DOCKER_ID}/scapp-recommendations:latest
    depends_on: [ "logger-daemon", "recommendations-db" ]
    ports: [ "3011:80" ]
    environment:
      - TOKEN_SECRET=AkbRocZI
      - DEBUG=recommendations-d
      - LOGGING_HOST=logger-daemon
      - WITH_PERSISTENT_DATA=Y
      - DB_HOST=recommendations-db
      - DB_PORT=5984
      - DB_NAME=recommendations
      - GATEWAY_HOST=gateway
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks: [ "scapp-net" ]
  
  recommendations-db:
    image: ${DOCKER_ID}/storage-system:latest
    ports: ["3012:5984"]
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks: [ "scapp-net" ]



  ###########
  # gateway #
  ###########
  gateway:
    image: ${DOCKER_ID}/scapp-gateway:latest
    ports: [ "80:80" ]
    deploy:
      # locate this service in the swarm manager
      placement:
        constraints:
          - node.role == manager
    networks: [ "scapp-net" ]
    depends_on: 
      - users-daemon
      - orders-daemon
      - shopping-carts-daemon
      - products-daemon
      - logger-daemon

  ##############
  # visualizer #
  ##############
  # Docker GUI for swarms
  visualizer:
    image: dockersamples/visualizer:latest
    ports: [ "8080:8080" ]
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      # locate this service in the swarm manager
      placement:
        constraints:
          - node.role == manager
    networks: [ "scapp-net" ]

networks:
  scapp-net:
    external: true